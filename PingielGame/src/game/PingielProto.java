// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pingiel.proto

package game;

public final class PingielProto {
  private PingielProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface BallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Ball)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required double x = 1;</code>
     */
    boolean hasX();
    /**
     * <code>required double x = 1;</code>
     */
    double getX();

    /**
     * <code>required double y = 2;</code>
     */
    boolean hasY();
    /**
     * <code>required double y = 2;</code>
     */
    double getY();

    /**
     * <code>required double horizontal_angle = 3;</code>
     */
    boolean hasHorizontalAngle();
    /**
     * <code>required double horizontal_angle = 3;</code>
     */
    double getHorizontalAngle();
  }
  /**
   * Protobuf type {@code Ball}
   */
  public static final class Ball extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Ball)
      BallOrBuilder {
    // Use Ball.newBuilder() to construct.
    private Ball(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Ball(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Ball defaultInstance;
    public static Ball getDefaultInstance() {
      return defaultInstance;
    }

    public Ball getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Ball(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              x_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              y_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              horizontalAngle_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return game.PingielProto.internal_static_Ball_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return game.PingielProto.internal_static_Ball_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              game.PingielProto.Ball.class, game.PingielProto.Ball.Builder.class);
    }

    public static com.google.protobuf.Parser<Ball> PARSER =
        new com.google.protobuf.AbstractParser<Ball>() {
      public Ball parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ball(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Ball> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int X_FIELD_NUMBER = 1;
    private double x_;
    /**
     * <code>required double x = 1;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required double x = 1;</code>
     */
    public double getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private double y_;
    /**
     * <code>required double y = 2;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required double y = 2;</code>
     */
    public double getY() {
      return y_;
    }

    public static final int HORIZONTAL_ANGLE_FIELD_NUMBER = 3;
    private double horizontalAngle_;
    /**
     * <code>required double horizontal_angle = 3;</code>
     */
    public boolean hasHorizontalAngle() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double horizontal_angle = 3;</code>
     */
    public double getHorizontalAngle() {
      return horizontalAngle_;
    }

    private void initFields() {
      x_ = 0D;
      y_ = 0D;
      horizontalAngle_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHorizontalAngle()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, horizontalAngle_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, horizontalAngle_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static game.PingielProto.Ball parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static game.PingielProto.Ball parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static game.PingielProto.Ball parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static game.PingielProto.Ball parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static game.PingielProto.Ball parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static game.PingielProto.Ball parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static game.PingielProto.Ball parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static game.PingielProto.Ball parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static game.PingielProto.Ball parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static game.PingielProto.Ball parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(game.PingielProto.Ball prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Ball}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Ball)
        game.PingielProto.BallOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return game.PingielProto.internal_static_Ball_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return game.PingielProto.internal_static_Ball_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                game.PingielProto.Ball.class, game.PingielProto.Ball.Builder.class);
      }

      // Construct using game.PingielProto.Ball.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        horizontalAngle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return game.PingielProto.internal_static_Ball_descriptor;
      }

      public game.PingielProto.Ball getDefaultInstanceForType() {
        return game.PingielProto.Ball.getDefaultInstance();
      }

      public game.PingielProto.Ball build() {
        game.PingielProto.Ball result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.PingielProto.Ball buildPartial() {
        game.PingielProto.Ball result = new game.PingielProto.Ball(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.horizontalAngle_ = horizontalAngle_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.PingielProto.Ball) {
          return mergeFrom((game.PingielProto.Ball)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.PingielProto.Ball other) {
        if (other == game.PingielProto.Ball.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasHorizontalAngle()) {
          setHorizontalAngle(other.getHorizontalAngle());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasHorizontalAngle()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        game.PingielProto.Ball parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.PingielProto.Ball) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double x_ ;
      /**
       * <code>required double x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required double x = 1;</code>
       */
      public double getX() {
        return x_;
      }
      /**
       * <code>required double x = 1;</code>
       */
      public Builder setX(double value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double x = 1;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0D;
        onChanged();
        return this;
      }

      private double y_ ;
      /**
       * <code>required double y = 2;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required double y = 2;</code>
       */
      public double getY() {
        return y_;
      }
      /**
       * <code>required double y = 2;</code>
       */
      public Builder setY(double value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double y = 2;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0D;
        onChanged();
        return this;
      }

      private double horizontalAngle_ ;
      /**
       * <code>required double horizontal_angle = 3;</code>
       */
      public boolean hasHorizontalAngle() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double horizontal_angle = 3;</code>
       */
      public double getHorizontalAngle() {
        return horizontalAngle_;
      }
      /**
       * <code>required double horizontal_angle = 3;</code>
       */
      public Builder setHorizontalAngle(double value) {
        bitField0_ |= 0x00000004;
        horizontalAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double horizontal_angle = 3;</code>
       */
      public Builder clearHorizontalAngle() {
        bitField0_ = (bitField0_ & ~0x00000004);
        horizontalAngle_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Ball)
    }

    static {
      defaultInstance = new Ball(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Ball)
  }

  public interface RacketOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Racket)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required double y = 1;</code>
     */
    boolean hasY();
    /**
     * <code>required double y = 1;</code>
     */
    double getY();

    /**
     * <code>required double angle = 2;</code>
     */
    boolean hasAngle();
    /**
     * <code>required double angle = 2;</code>
     */
    double getAngle();

    /**
     * <code>optional bool up = 3;</code>
     */
    boolean hasUp();
    /**
     * <code>optional bool up = 3;</code>
     */
    boolean getUp();

    /**
     * <code>optional bool down = 4;</code>
     */
    boolean hasDown();
    /**
     * <code>optional bool down = 4;</code>
     */
    boolean getDown();

    /**
     * <code>optional bool right = 5;</code>
     */
    boolean hasRight();
    /**
     * <code>optional bool right = 5;</code>
     */
    boolean getRight();

    /**
     * <code>optional bool left = 6;</code>
     */
    boolean hasLeft();
    /**
     * <code>optional bool left = 6;</code>
     */
    boolean getLeft();
  }
  /**
   * Protobuf type {@code Racket}
   */
  public static final class Racket extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Racket)
      RacketOrBuilder {
    // Use Racket.newBuilder() to construct.
    private Racket(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Racket(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Racket defaultInstance;
    public static Racket getDefaultInstance() {
      return defaultInstance;
    }

    public Racket getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Racket(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              y_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              angle_ = input.readDouble();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              up_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              down_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              right_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              left_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return game.PingielProto.internal_static_Racket_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return game.PingielProto.internal_static_Racket_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              game.PingielProto.Racket.class, game.PingielProto.Racket.Builder.class);
    }

    public static com.google.protobuf.Parser<Racket> PARSER =
        new com.google.protobuf.AbstractParser<Racket>() {
      public Racket parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Racket(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Racket> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int Y_FIELD_NUMBER = 1;
    private double y_;
    /**
     * <code>required double y = 1;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required double y = 1;</code>
     */
    public double getY() {
      return y_;
    }

    public static final int ANGLE_FIELD_NUMBER = 2;
    private double angle_;
    /**
     * <code>required double angle = 2;</code>
     */
    public boolean hasAngle() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required double angle = 2;</code>
     */
    public double getAngle() {
      return angle_;
    }

    public static final int UP_FIELD_NUMBER = 3;
    private boolean up_;
    /**
     * <code>optional bool up = 3;</code>
     */
    public boolean hasUp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool up = 3;</code>
     */
    public boolean getUp() {
      return up_;
    }

    public static final int DOWN_FIELD_NUMBER = 4;
    private boolean down_;
    /**
     * <code>optional bool down = 4;</code>
     */
    public boolean hasDown() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool down = 4;</code>
     */
    public boolean getDown() {
      return down_;
    }

    public static final int RIGHT_FIELD_NUMBER = 5;
    private boolean right_;
    /**
     * <code>optional bool right = 5;</code>
     */
    public boolean hasRight() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool right = 5;</code>
     */
    public boolean getRight() {
      return right_;
    }

    public static final int LEFT_FIELD_NUMBER = 6;
    private boolean left_;
    /**
     * <code>optional bool left = 6;</code>
     */
    public boolean hasLeft() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool left = 6;</code>
     */
    public boolean getLeft() {
      return left_;
    }

    private void initFields() {
      y_ = 0D;
      angle_ = 0D;
      up_ = false;
      down_ = false;
      right_ = false;
      left_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAngle()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, y_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, angle_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, up_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, down_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, right_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, left_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, y_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, angle_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, up_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, down_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, right_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, left_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static game.PingielProto.Racket parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static game.PingielProto.Racket parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static game.PingielProto.Racket parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static game.PingielProto.Racket parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static game.PingielProto.Racket parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static game.PingielProto.Racket parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static game.PingielProto.Racket parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static game.PingielProto.Racket parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static game.PingielProto.Racket parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static game.PingielProto.Racket parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(game.PingielProto.Racket prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Racket}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Racket)
        game.PingielProto.RacketOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return game.PingielProto.internal_static_Racket_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return game.PingielProto.internal_static_Racket_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                game.PingielProto.Racket.class, game.PingielProto.Racket.Builder.class);
      }

      // Construct using game.PingielProto.Racket.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        y_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        angle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        up_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        down_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        right_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        left_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return game.PingielProto.internal_static_Racket_descriptor;
      }

      public game.PingielProto.Racket getDefaultInstanceForType() {
        return game.PingielProto.Racket.getDefaultInstance();
      }

      public game.PingielProto.Racket build() {
        game.PingielProto.Racket result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.PingielProto.Racket buildPartial() {
        game.PingielProto.Racket result = new game.PingielProto.Racket(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.angle_ = angle_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.up_ = up_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.down_ = down_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.right_ = right_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.left_ = left_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.PingielProto.Racket) {
          return mergeFrom((game.PingielProto.Racket)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.PingielProto.Racket other) {
        if (other == game.PingielProto.Racket.getDefaultInstance()) return this;
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasAngle()) {
          setAngle(other.getAngle());
        }
        if (other.hasUp()) {
          setUp(other.getUp());
        }
        if (other.hasDown()) {
          setDown(other.getDown());
        }
        if (other.hasRight()) {
          setRight(other.getRight());
        }
        if (other.hasLeft()) {
          setLeft(other.getLeft());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasY()) {
          
          return false;
        }
        if (!hasAngle()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        game.PingielProto.Racket parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.PingielProto.Racket) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double y_ ;
      /**
       * <code>required double y = 1;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required double y = 1;</code>
       */
      public double getY() {
        return y_;
      }
      /**
       * <code>required double y = 1;</code>
       */
      public Builder setY(double value) {
        bitField0_ |= 0x00000001;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double y = 1;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0D;
        onChanged();
        return this;
      }

      private double angle_ ;
      /**
       * <code>required double angle = 2;</code>
       */
      public boolean hasAngle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required double angle = 2;</code>
       */
      public double getAngle() {
        return angle_;
      }
      /**
       * <code>required double angle = 2;</code>
       */
      public Builder setAngle(double value) {
        bitField0_ |= 0x00000002;
        angle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double angle = 2;</code>
       */
      public Builder clearAngle() {
        bitField0_ = (bitField0_ & ~0x00000002);
        angle_ = 0D;
        onChanged();
        return this;
      }

      private boolean up_ ;
      /**
       * <code>optional bool up = 3;</code>
       */
      public boolean hasUp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool up = 3;</code>
       */
      public boolean getUp() {
        return up_;
      }
      /**
       * <code>optional bool up = 3;</code>
       */
      public Builder setUp(boolean value) {
        bitField0_ |= 0x00000004;
        up_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool up = 3;</code>
       */
      public Builder clearUp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        up_ = false;
        onChanged();
        return this;
      }

      private boolean down_ ;
      /**
       * <code>optional bool down = 4;</code>
       */
      public boolean hasDown() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool down = 4;</code>
       */
      public boolean getDown() {
        return down_;
      }
      /**
       * <code>optional bool down = 4;</code>
       */
      public Builder setDown(boolean value) {
        bitField0_ |= 0x00000008;
        down_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool down = 4;</code>
       */
      public Builder clearDown() {
        bitField0_ = (bitField0_ & ~0x00000008);
        down_ = false;
        onChanged();
        return this;
      }

      private boolean right_ ;
      /**
       * <code>optional bool right = 5;</code>
       */
      public boolean hasRight() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool right = 5;</code>
       */
      public boolean getRight() {
        return right_;
      }
      /**
       * <code>optional bool right = 5;</code>
       */
      public Builder setRight(boolean value) {
        bitField0_ |= 0x00000010;
        right_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool right = 5;</code>
       */
      public Builder clearRight() {
        bitField0_ = (bitField0_ & ~0x00000010);
        right_ = false;
        onChanged();
        return this;
      }

      private boolean left_ ;
      /**
       * <code>optional bool left = 6;</code>
       */
      public boolean hasLeft() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool left = 6;</code>
       */
      public boolean getLeft() {
        return left_;
      }
      /**
       * <code>optional bool left = 6;</code>
       */
      public Builder setLeft(boolean value) {
        bitField0_ |= 0x00000020;
        left_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool left = 6;</code>
       */
      public Builder clearLeft() {
        bitField0_ = (bitField0_ & ~0x00000020);
        left_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Racket)
    }

    static {
      defaultInstance = new Racket(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Racket)
  }

  public interface GameOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Game)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .Ball ball = 1;</code>
     */
    boolean hasBall();
    /**
     * <code>optional .Ball ball = 1;</code>
     */
    game.PingielProto.Ball getBall();
    /**
     * <code>optional .Ball ball = 1;</code>
     */
    game.PingielProto.BallOrBuilder getBallOrBuilder();

    /**
     * <code>required .Racket racket = 2;</code>
     */
    boolean hasRacket();
    /**
     * <code>required .Racket racket = 2;</code>
     */
    game.PingielProto.Racket getRacket();
    /**
     * <code>required .Racket racket = 2;</code>
     */
    game.PingielProto.RacketOrBuilder getRacketOrBuilder();
  }
  /**
   * Protobuf type {@code Game}
   */
  public static final class Game extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Game)
      GameOrBuilder {
    // Use Game.newBuilder() to construct.
    private Game(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Game(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Game defaultInstance;
    public static Game getDefaultInstance() {
      return defaultInstance;
    }

    public Game getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Game(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              game.PingielProto.Ball.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = ball_.toBuilder();
              }
              ball_ = input.readMessage(game.PingielProto.Ball.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ball_);
                ball_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              game.PingielProto.Racket.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = racket_.toBuilder();
              }
              racket_ = input.readMessage(game.PingielProto.Racket.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(racket_);
                racket_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return game.PingielProto.internal_static_Game_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return game.PingielProto.internal_static_Game_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              game.PingielProto.Game.class, game.PingielProto.Game.Builder.class);
    }

    public static com.google.protobuf.Parser<Game> PARSER =
        new com.google.protobuf.AbstractParser<Game>() {
      public Game parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Game(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Game> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BALL_FIELD_NUMBER = 1;
    private game.PingielProto.Ball ball_;
    /**
     * <code>optional .Ball ball = 1;</code>
     */
    public boolean hasBall() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .Ball ball = 1;</code>
     */
    public game.PingielProto.Ball getBall() {
      return ball_;
    }
    /**
     * <code>optional .Ball ball = 1;</code>
     */
    public game.PingielProto.BallOrBuilder getBallOrBuilder() {
      return ball_;
    }

    public static final int RACKET_FIELD_NUMBER = 2;
    private game.PingielProto.Racket racket_;
    /**
     * <code>required .Racket racket = 2;</code>
     */
    public boolean hasRacket() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .Racket racket = 2;</code>
     */
    public game.PingielProto.Racket getRacket() {
      return racket_;
    }
    /**
     * <code>required .Racket racket = 2;</code>
     */
    public game.PingielProto.RacketOrBuilder getRacketOrBuilder() {
      return racket_;
    }

    private void initFields() {
      ball_ = game.PingielProto.Ball.getDefaultInstance();
      racket_ = game.PingielProto.Racket.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasRacket()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasBall()) {
        if (!getBall().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getRacket().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, ball_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, racket_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, ball_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, racket_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static game.PingielProto.Game parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static game.PingielProto.Game parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static game.PingielProto.Game parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static game.PingielProto.Game parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static game.PingielProto.Game parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static game.PingielProto.Game parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static game.PingielProto.Game parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static game.PingielProto.Game parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static game.PingielProto.Game parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static game.PingielProto.Game parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(game.PingielProto.Game prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Game}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Game)
        game.PingielProto.GameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return game.PingielProto.internal_static_Game_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return game.PingielProto.internal_static_Game_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                game.PingielProto.Game.class, game.PingielProto.Game.Builder.class);
      }

      // Construct using game.PingielProto.Game.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getBallFieldBuilder();
          getRacketFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (ballBuilder_ == null) {
          ball_ = game.PingielProto.Ball.getDefaultInstance();
        } else {
          ballBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (racketBuilder_ == null) {
          racket_ = game.PingielProto.Racket.getDefaultInstance();
        } else {
          racketBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return game.PingielProto.internal_static_Game_descriptor;
      }

      public game.PingielProto.Game getDefaultInstanceForType() {
        return game.PingielProto.Game.getDefaultInstance();
      }

      public game.PingielProto.Game build() {
        game.PingielProto.Game result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.PingielProto.Game buildPartial() {
        game.PingielProto.Game result = new game.PingielProto.Game(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (ballBuilder_ == null) {
          result.ball_ = ball_;
        } else {
          result.ball_ = ballBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (racketBuilder_ == null) {
          result.racket_ = racket_;
        } else {
          result.racket_ = racketBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.PingielProto.Game) {
          return mergeFrom((game.PingielProto.Game)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.PingielProto.Game other) {
        if (other == game.PingielProto.Game.getDefaultInstance()) return this;
        if (other.hasBall()) {
          mergeBall(other.getBall());
        }
        if (other.hasRacket()) {
          mergeRacket(other.getRacket());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRacket()) {
          
          return false;
        }
        if (hasBall()) {
          if (!getBall().isInitialized()) {
            
            return false;
          }
        }
        if (!getRacket().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        game.PingielProto.Game parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.PingielProto.Game) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private game.PingielProto.Ball ball_ = game.PingielProto.Ball.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          game.PingielProto.Ball, game.PingielProto.Ball.Builder, game.PingielProto.BallOrBuilder> ballBuilder_;
      /**
       * <code>optional .Ball ball = 1;</code>
       */
      public boolean hasBall() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .Ball ball = 1;</code>
       */
      public game.PingielProto.Ball getBall() {
        if (ballBuilder_ == null) {
          return ball_;
        } else {
          return ballBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Ball ball = 1;</code>
       */
      public Builder setBall(game.PingielProto.Ball value) {
        if (ballBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ball_ = value;
          onChanged();
        } else {
          ballBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .Ball ball = 1;</code>
       */
      public Builder setBall(
          game.PingielProto.Ball.Builder builderForValue) {
        if (ballBuilder_ == null) {
          ball_ = builderForValue.build();
          onChanged();
        } else {
          ballBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .Ball ball = 1;</code>
       */
      public Builder mergeBall(game.PingielProto.Ball value) {
        if (ballBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              ball_ != game.PingielProto.Ball.getDefaultInstance()) {
            ball_ =
              game.PingielProto.Ball.newBuilder(ball_).mergeFrom(value).buildPartial();
          } else {
            ball_ = value;
          }
          onChanged();
        } else {
          ballBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .Ball ball = 1;</code>
       */
      public Builder clearBall() {
        if (ballBuilder_ == null) {
          ball_ = game.PingielProto.Ball.getDefaultInstance();
          onChanged();
        } else {
          ballBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .Ball ball = 1;</code>
       */
      public game.PingielProto.Ball.Builder getBallBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getBallFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Ball ball = 1;</code>
       */
      public game.PingielProto.BallOrBuilder getBallOrBuilder() {
        if (ballBuilder_ != null) {
          return ballBuilder_.getMessageOrBuilder();
        } else {
          return ball_;
        }
      }
      /**
       * <code>optional .Ball ball = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          game.PingielProto.Ball, game.PingielProto.Ball.Builder, game.PingielProto.BallOrBuilder> 
          getBallFieldBuilder() {
        if (ballBuilder_ == null) {
          ballBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              game.PingielProto.Ball, game.PingielProto.Ball.Builder, game.PingielProto.BallOrBuilder>(
                  getBall(),
                  getParentForChildren(),
                  isClean());
          ball_ = null;
        }
        return ballBuilder_;
      }

      private game.PingielProto.Racket racket_ = game.PingielProto.Racket.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          game.PingielProto.Racket, game.PingielProto.Racket.Builder, game.PingielProto.RacketOrBuilder> racketBuilder_;
      /**
       * <code>required .Racket racket = 2;</code>
       */
      public boolean hasRacket() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .Racket racket = 2;</code>
       */
      public game.PingielProto.Racket getRacket() {
        if (racketBuilder_ == null) {
          return racket_;
        } else {
          return racketBuilder_.getMessage();
        }
      }
      /**
       * <code>required .Racket racket = 2;</code>
       */
      public Builder setRacket(game.PingielProto.Racket value) {
        if (racketBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          racket_ = value;
          onChanged();
        } else {
          racketBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .Racket racket = 2;</code>
       */
      public Builder setRacket(
          game.PingielProto.Racket.Builder builderForValue) {
        if (racketBuilder_ == null) {
          racket_ = builderForValue.build();
          onChanged();
        } else {
          racketBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .Racket racket = 2;</code>
       */
      public Builder mergeRacket(game.PingielProto.Racket value) {
        if (racketBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              racket_ != game.PingielProto.Racket.getDefaultInstance()) {
            racket_ =
              game.PingielProto.Racket.newBuilder(racket_).mergeFrom(value).buildPartial();
          } else {
            racket_ = value;
          }
          onChanged();
        } else {
          racketBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .Racket racket = 2;</code>
       */
      public Builder clearRacket() {
        if (racketBuilder_ == null) {
          racket_ = game.PingielProto.Racket.getDefaultInstance();
          onChanged();
        } else {
          racketBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .Racket racket = 2;</code>
       */
      public game.PingielProto.Racket.Builder getRacketBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getRacketFieldBuilder().getBuilder();
      }
      /**
       * <code>required .Racket racket = 2;</code>
       */
      public game.PingielProto.RacketOrBuilder getRacketOrBuilder() {
        if (racketBuilder_ != null) {
          return racketBuilder_.getMessageOrBuilder();
        } else {
          return racket_;
        }
      }
      /**
       * <code>required .Racket racket = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          game.PingielProto.Racket, game.PingielProto.Racket.Builder, game.PingielProto.RacketOrBuilder> 
          getRacketFieldBuilder() {
        if (racketBuilder_ == null) {
          racketBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              game.PingielProto.Racket, game.PingielProto.Racket.Builder, game.PingielProto.RacketOrBuilder>(
                  getRacket(),
                  getParentForChildren(),
                  isClean());
          racket_ = null;
        }
        return racketBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Game)
    }

    static {
      defaultInstance = new Game(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Game)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Ball_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Ball_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Racket_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Racket_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Game_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Game_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rPingiel.proto\"6\n\004Ball\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030" +
      "\002 \002(\001\022\030\n\020horizontal_angle\030\003 \002(\001\"Y\n\006Racke" +
      "t\022\t\n\001y\030\001 \002(\001\022\r\n\005angle\030\002 \002(\001\022\n\n\002up\030\003 \001(\010\022" +
      "\014\n\004down\030\004 \001(\010\022\r\n\005right\030\005 \001(\010\022\014\n\004left\030\006 \001" +
      "(\010\"4\n\004Game\022\023\n\004ball\030\001 \001(\0132\005.Ball\022\027\n\006racke" +
      "t\030\002 \002(\0132\007.RacketB\024\n\004gameB\014PingielProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_Ball_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Ball_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Ball_descriptor,
        new java.lang.String[] { "X", "Y", "HorizontalAngle", });
    internal_static_Racket_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Racket_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Racket_descriptor,
        new java.lang.String[] { "Y", "Angle", "Up", "Down", "Right", "Left", });
    internal_static_Game_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_Game_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Game_descriptor,
        new java.lang.String[] { "Ball", "Racket", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
